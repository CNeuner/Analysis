// Compute the integral \int_a^b f(x) dx using Simpson's rule.
// The intervall [a,b] is divided into n subintervals.
simpson := procedure(f, a, b, n) {
    x   := a;
    sum := evalTerm(f);
    h   := (b - a) / n;
    for (i in [1 .. n - 1]) {
        x += h;
        v := evalTerm(f);
        if (i % 2 == 1) {
            sum += 4 * v;
        } else {
            sum += 2 * v;
        }
    }
    x := b;
    sum += evalTerm(f);
    return sum * h / 3; 
};

interactive := procedure() {
    s := read("enter function");
    f := parse(s);
    a := read("enter left  boundary");
    b := read("enter right boundary");
    n := read("enter number of intervals (must be even)");
    n := (n + 1) \ 2 * 2;  // ensure n is even
    print(n);
    integral := simpson(f, a, b, n);
    print("The approximate value of the integral is $integral$.");
};

demo := procedure() {
    f := parse("exp(-x*x)");
    a := 0;
    b := 1;
    n := 2;
    while (n < 100000) {
        print("n = $n$: $simpson(f, a, b, n) - 0.7468241328124270$");
        n *= 2;
    }
};

interactive();
