// taylor(t, n) computes the first n+1 terms of the taylor sequence of t:
// taylor(t, n) = sum(1/k! * d^k t/(dx)^k(0), k = 0 .. n)
taylor := procedure(t, n) {
    l := [ evalAtZero(t) ];
    for (k in [1 .. n]) {
        t := diff(t, "x");
        print("$k$: $t$");
        l += [ evalAtZero(t) / k! ];
    }
    return +/ [ l[i] + "*x**$i-1$ + " : i in [1 .. #l] | l[i] != 0 ];
};

// evaluate the term t after substituting x by 0 
evalAtZero := procedure(t) {
    x := 0;
    return evalTerm(t);
};

// diferenttiate t with respect to the variable x and simplify the result
diff := procedure(t, x) {
    return simplify(diffAux(t,x));
};
    
// differentiate the term t with respect to the variable x
diffAux := procedure(t, x) {
    match (t) {
        case t1 + t2 :
            return diffAux(t1, x) + diffAux(t2, x);
        case - t :
            return - diffAux(t, x);
        case t1 - t2 :
            return diffAux(t1, x) - diffAux(t2, x);
        case t1 * t2 :
            return diffAux(t1, x) * t2 + t1 * diffAux(t2, x);
        case t1 / t2 :
        return ( diffAux(t1, x) * t2 - t1 * diffAux(t2, x) ) / (t2 ** 2);
        case f ** g :
        if (isInteger(g) || isRational(g) || isReal(g)) {
                g1 := g - 1;
                return g * diffAux(f, x) * f ** g1;
            } else {
                return diffAux( @exp(g * @ln(f)), x);
            }
        case sqrt(a) :
            return 1 / 2 * diffAux(a, x) / @sqrt(a);
        case sin(a) :
            return diffAux(a, x) * @cos(a);
        case cos(a) :
            return - diffAux(a, x) * @sin(a);
        case tan(a) :
            return diffAux(@sin(a) / @cos(a), x);
        case asin(a) :
            return diffAux(a, x) / @sqrt(1 - a ** 2);
        case acos(a) :
            return - diffAux(a, x) / @sqrt(1 - a ** 2);
        case atan(a) :
            return diffAux(a, x) / (1 + a ** 2);
        case ln(a) :
            return diffAux(a, x) / a;
        case exp(a) :
            return diffAux(a, x) * @exp(a);
        case (t) :
            return diffAux(t, x);
        case ^variable(t) :
            if (t == x) {
                return 1;
            } else {
                return 0;
            }
        default:
            if (isInteger(t) || isRational(t) || isReal(t)) {
                return 0;
            } else {
                abort("error: diff($t$, $x$)");
            }
    }
};

// Try to simplify expr using the following rules:
//    0 * x = x * 0 = 0,
//    1 * x = x * 1 = 1,
//    0 + x = x + 0 = x
//    0 - x = - x
//    x - 0 = x
//    x - x = 0
//    x / x = 1
//    0 / x = 0
//    x ** 1 = x
simplify := procedure(expr) {
    match (expr) {
    case - - arg: 
        return simplify(arg);
    case -arg: 
        return -simplify(arg);
    case (lhs ** a) ** b:
        if (isInteger(a) && isInteger(b)) {
            c := a * b;
            return simplify(lhs ** c);
        } else {
            return simplify(lhs ** a) ** b;
        }
    case lhs ** rhs:
        u := simplify(lhs);
        v := simplify(rhs);
        switch {
            case v == 0 : return 1;  
            case v == 1 : return u;  
            default: return u ** v;
        }
    case lhs + rhs:
        u := simplify(lhs);
        v := simplify(rhs);
        switch {
            case u == 0 : return v;  
            case v == 0 : return u;  
            default: return u + v;
        }
    case lhs - rhs:
        u := simplify(lhs);
        v := simplify(rhs);
        switch {
            case u == v : return 0;  
            case v == 0 : return u;  
            case u == 0 : return - v;  
            default: return u - v;
        }
    case a * (b * rhs):
        u := simplify(a);
        v := simplify(b);
        w := simplify(rhs);
        if (isInteger(u) && isInteger(v)) {
            c := u * v;
            return simplify(c * w);
        } else if (u == 1) {
            return simplify(v * w);
        } else if (u == 0) {
            return 0;
        } else {        
            return u * simplify(v * w);
        }
    case lhs * rhs:
        u := simplify(lhs);
        v := simplify(rhs);    
        switch {
            case u ==  0 : return 0;  
            case v ==  0 : return 0;  
            case u ==  1 : return v;  
            case v ==  1 : return u;  
            case u == -1 : return - v;  
            case v == -1 : return - u;  
            default: return u * v;
        }
    case lhs / rhs:
        u := simplify(lhs);
        v := simplify(rhs);    
        switch {
            case u == v : return 1;  
            case u == 0 : return 0;  
            case v == 1 : return u;  
            default: return u / v;
        }    
    case (arg) : return simplify(arg);
    default: return expr;
    }
};
    
interactive := procedure() {
    sin  := mySinus;
    cos  := myCosinus;
    tan  := myTangens;
    sqrt := mySqrt;
    s := read("enter function");
    t := parse(s);
    n := read("enter number of terms in series");
    l := taylor(t, n);
    print("$s$ = $l$ ...");
};

var gSavedSinus, gSavedCosinus, gSavedTangens, gSavedSqrt;
gSavedSinus   := sin;
gSavedCosinus := cos;
gSavedTangens := tan;
gSavedSqrt    := sqrt;


test := procedure() {
    sin  := mySinus;
    cos  := myCosinus;
    tan  := myTangens;
    sqrt := mySqrt;
    s := "sin(x)";
    t := parse(s);
    n := 12;
    l := taylor(t, n);
    print("$s$ = $l$...");
    s := "cos(x)";
    t := parse(s);
    n := 12;
    l := taylor(t, n);
    print("$s$ = $l$...");
};

mySinus := procedure(x) {
    if (x == 0) {
        return 0;
    }
    return gSavedSinus(x);
};

myCosinus := procedure(x) {
    if (x == 0) {
        return 1;
    }
    return gSavedCosinus(x);
};

myTangens := procedure(x) {
    if (x == 0) {
        return 0;
    }
    return gSavedTangens(x);
};

mySqrt := procedure(x) {
    if (x == 0) {
        return 0;
    }
    if (x == 1) {
        return 1;
    }
    return gSavedSqrt(x);
};

test();

